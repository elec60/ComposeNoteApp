// Generated by Dagger (https://dagger.dev).
package com.mousavi.noteappwithcompose.feature_note.presentation.notes;

import com.mousavi.noteappwithcompose.feature_note.domain.use_case.NoteUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotesViewModel_Factory implements Factory<NotesViewModel> {
  private final Provider<NoteUseCases> noteUseCasesProvider;

  public NotesViewModel_Factory(Provider<NoteUseCases> noteUseCasesProvider) {
    this.noteUseCasesProvider = noteUseCasesProvider;
  }

  @Override
  public NotesViewModel get() {
    return newInstance(noteUseCasesProvider.get());
  }

  public static NotesViewModel_Factory create(Provider<NoteUseCases> noteUseCasesProvider) {
    return new NotesViewModel_Factory(noteUseCasesProvider);
  }

  public static NotesViewModel newInstance(NoteUseCases noteUseCases) {
    return new NotesViewModel(noteUseCases);
  }
}
