// Generated by Dagger (https://dagger.dev).
package com.mousavi.noteappwithcompose.di;

import com.mousavi.noteappwithcompose.feature_note.domain.repository.NoteRepository;
import com.mousavi.noteappwithcompose.feature_note.domain.use_case.NoteUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNoteUseCasesFactory implements Factory<NoteUseCases> {
  private final Provider<NoteRepository> repositoryProvider;

  public AppModule_ProvideNoteUseCasesFactory(Provider<NoteRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public NoteUseCases get() {
    return provideNoteUseCases(repositoryProvider.get());
  }

  public static AppModule_ProvideNoteUseCasesFactory create(
      Provider<NoteRepository> repositoryProvider) {
    return new AppModule_ProvideNoteUseCasesFactory(repositoryProvider);
  }

  public static NoteUseCases provideNoteUseCases(NoteRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideNoteUseCases(repository));
  }
}
