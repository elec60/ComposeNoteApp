// Generated by Dagger (https://dagger.dev).
package com.mousavi.noteappwithcompose.di;

import com.mousavi.noteappwithcompose.feature_note.data.data_source.NoteDatabase;
import com.mousavi.noteappwithcompose.feature_note.domain.repository.NoteRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideNotesRepositoryFactory implements Factory<NoteRepository> {
  private final Provider<NoteDatabase> dbProvider;

  public AppModule_ProvideNotesRepositoryFactory(Provider<NoteDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public NoteRepository get() {
    return provideNotesRepository(dbProvider.get());
  }

  public static AppModule_ProvideNotesRepositoryFactory create(Provider<NoteDatabase> dbProvider) {
    return new AppModule_ProvideNotesRepositoryFactory(dbProvider);
  }

  public static NoteRepository provideNotesRepository(NoteDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideNotesRepository(db));
  }
}
